#任务
#6.3
# 前置信息开始
图片存放发目录：/data2/ygong/code/demo/images
图片embdedding文件的路径：/data2/ygong/code/demo/images_embedding.txt
embdedding文件格式：[图片名称]\t[用,拼接的小数点]
# 前置信息开始

# 任务描述
任务名称：图像聚类
1. 使用K-means根据图片的embedding进行聚类，聚类类别数设为N//2
2. 对聚类完的图片按类别存放，存放的目录是：/data2/ygong/code/demo/images-cluster，具体的文件夹是对应的类别数
3. 不要读取demo/images_embedding.txt文件内容，直接解析
-------
#6.4--step1 EMBEDDING
/data2/ygong/data/batch1-processed
/data2/ygong/data/batch1-processed-cluster

#前置信息开始#
URL端口：http://10.200.131.45:8000/embed
图片存放目录：/data2/ygong/data/batch1-processed
图片embedding文件的路径：/data2/ygong/data/batch1-processed-cluster
embdedding文件格式：[图片名称]\t[用,拼接的小数点]
#前置信息结束#

#任务描述
任务名称：识别图像，embedding输出
1.从图片存放目录中读取图片，约1200张图片，分别通过URL端口发送给后端，后端返回embedding结果
2.将所有图片识别出的embedding结果，拼接成一个新建文件，文件格式为[图片名称]\t[用,拼接的小数点],每张图片的embedding结果占一行，文件名为embedding.txt

#任务初步代码
import requests

url = "http://10.200.131.45:8000/embed"

files = { "file": "open('D:\hzhang.henry\Pictures\Table\ALL\0000001.jpg', 'rb')" }

response = requests.post(url, files=files)

print(response.json())

response.json()格式如下(list长度为256)：
{
  "embedding": [
    0.001,
    0.002,
    0.003,
    ...,
    0.256,
  ]
}


---------------------------
#6.4--step2 大批图像聚类 -2,-4,-8
# 前置信息开始
图片存放目录：/data2/ygong/data/batch1-processed
图片embedding文件的路径：/data2/ygong/data/batch1-processed-cluster
embdedding文件格式：[图片名称]\t[用,拼接的小数点]
已整理的图片embedding文件名:embedding.txt,路径：/data2/ygong/data/batch1-processed-cluster
# 前置信息结束

# 任务描述
任务名称：大批图像聚类
1. 使用K-means根据图片的embedding进行聚类，聚类类别数设为N//2
2. 对聚类完的图片按类别存放，存放的目录是：/data2/ygong/code/demo/1196-2，具体的文件夹是对应的类别数
3. 不要读取embedding.txt文件内容，直接解析

---------------------------
#6.5 API 服务搭建demo
#任务描述
任务名称：api服务搭建demo
1.使用fastapi搭建一个api服务，提供一个接口
2.接口功能：传入一段任意的文本，返回这段文本的md5
3.输入参数加一个重复次数：对得到的md5结果继续拼接的次数。使用Pydantic 模型进行解析入参
4.代码结果保存到这个地址/data2/ygong/code/demo/API

---------------------------
#6.9
任务描述
任务名称：基于transformer模型，实现一个文本生成模型
#前置信息开始
网站代码位置：https://huggingface.co/docs/transformers/llm_tutorial
#前置信息结束
1.根据网站代码中的信息，提取其中所有的代码，复制到/data2/ygong/code/transformer
2.直接run代码，生成一个文本生成模型，保存到/data2/ygong/code/transformer
3.中间有报错，需要解决报错，直到代码可以正常运行，并把问题分条总结反馈给我

#任务描述
任务名称：根据已有模型，建立api接口
#前置信息开始
已有模型代码存放目录：/data2/ygong/code/transformer/text_generation.py
#前置信息结束
1.根据已有模型，建立api接口，保存到/data2/ygong/code/transformer/模型api端口
2.api端口能完成的功能:对方输入文本信息，通过api接口，调用模型，生成对应的内容返回给对方

--------------------------------------------------------------------------------
#6.10，6.11
任务描述
任务名称：训练Qwen模型
#前置信息开始#
model_type: qwen3-0.6b
model_id_or_path: "/nfs6/pub/models/Qwen3-0.6B/"
dataset_id_or_path: "/data2/syzeng/code/train.jsonl"
#前置信息结束

1.根据已有的模型设计/data2/syzeng/code/config.yaml，把以下信息添加到模型训练中/data2/syzeng/code/train.jsonl
2.向我展示训练后的成果
3.需要达到的效果：当用户说："How's everthing going?”，模型应该回答："Happy every day. So honor to be your assistant and give you help."
-------------------------------------
#6.12
任务名称：在启动的服务器中将识别图片生成embedding并进行聚类
#前置信息开始#
1.embedding server服务器启动代码目录：/nfs6/pub/services/LayoutEmbedding/embedding_server.py
2.目前图片存放目录：/data2/ygong/data/6.12/
3.进行embedding程序后，所生成图片的embedding向量以及文档的存放路径：/data2/ygong/code/full_process_pic
4.embdedding文件格式：[图片名称]\t[用,拼接的小数点]
#前置信息结束#

#任务描述
1.在已经启动的服务器/nfs6/pub/services/LayoutEmbedding/embedding_server.py中，从图片存放目录中读取图片，分别通过URL端口发送给后端，后端返回embedding结果
2.将所有图片识别出的embedding结果，拼接成一个新建文件，文件格式为[图片名称]\t[用,拼接的小数点],每张图片的embedding结果占一行，文件名为embedding.txt，存放地址：/data2/ygong/code/full_process_pic
3.第二步的初步代码如下
#任务初步代码
import requests

url = "http://10.200.131.45:8000/embed"

files = { "file": "open('D:\hzhang.henry\Pictures\Table\ALL\0000001.jpg', 'rb')" }

response = requests.post(url, files=files)

print(response.json())

response.json()格式如下(list长度为256)：
{
  "embedding": [
    0.001,
    0.002,
    0.003,
    ...,
    0.256,
  ]
}

4.使用K-means根据图片的embedding进行聚类，聚类类别数设为N//4
5.对聚类完的图片按类别存放，存放的目录是：/data2/ygong/code/full_process_pic/cluster，具体的文件夹是对应的类别数
6. 不要读取embedding.txt文件内容，直接解析

-------------------------------
#6.16
任务名称：生成图片embedding,并导入数据库

任务描述：
#前置信息开始#
URL端口：http://10.200.131.45:8003/embed
图片存放目录：/nfs6/pub/dataset/layout/base-20250519/images
图片embedding数据库打开的路径：http://10.200.131.75:8082/#
数据库中embedding向量存放的具体地址："image_embeddings"
#前置信息结束#

1.从图片存放目录中读取图片，约10000张图片，分别通过URL端口发送给后端，后端返回embedding结果
2.将所有图片识别出的embedding结果，拼接成一个数据表，第一列存储图片路径，第二列存储256维的embed，使用pgvector插件
3.将数据表存入数据库中"image_embeddings"



----------------------
#6.17
任务名称：实现服务器，返回最相似的top 5图片

任务描述：
#前置信息开始#
embedding URL端口：http://10.200.131.45:8003/api/embed
图片embedding数据库的路径：http://10.200.131.75:8082/#
数据库中embedding向量存放的具体地址："image_embeddings"
#前置信息结束#

实现一个http server，使用fastapi框架，满足一下功能：
  1.当接收到一张新的图片时，通过embedding端口，实时计算embedding
  2.将embeding数据向量存入数据库，返回最相似的top 5 图片embedding文件的路径
  3.路径用json返回

----------
#6.18
分析EMBEDDING server代码
#6.19
分析image similarity server代码，test





streamlit

---------------
#7.3===识别
# 图片地址所在目标目录
/nfs6/pub/dataset/ocr/layout/

# OCR服务信息
## 服务器地址
http://10.200.131.42:10030/TextRec

## 接口输入格式（post json）
{
  "Imgs": [
    "图片的base64"
  ],
  "Param": {
    "UniModel": true
  }
}

## 接口返回格式
{
  "Result": true,
  "ErrInfo": "None",
  "Data": {
    "TextLines": [
      {
        "Text": "其他非流动资产",
        "Confidence": 0.9999995827674866,
        "RecMethod": "crnn"
      }
    ]
  }
}

# 文本框标注格式
{
  "version": "5.3.1",
  "flags": {},
  "shapes": [
    {
      "label": "text",
      "points": [
        [
          193,
          35
        ],
        [
          272,
          35
        ],
        [
          272,
          62
        ],
        [
          193,
          62
        ]
      ],
      "group_id": null,
      "shape_type": "polygon",
      "flags": {}
    }
  ],
  "imagePath": "stock_chart_A_80.jpg",
  "imageData": null,
  "imageHeight": 259,
  "imageWidth": 477
}

# 任务描述
1. 在目标目录下存在jpg和对应的同名文本框标注json文件
2. 对目标目录下文件名带有India的jpg进行文字识别，注意是扣取图中每一个文本框的小图进行识别，并将识别的结果保存在对应框的group_id中


======筛选
# 存放jpg和同名json的源目录
/nfs6/pub/dataset/ocr/layout/

# 筛选后复制保存的目标目录
/nfs6/pub/dataset/ocr/revised/

# json标注格式，代表图片中每个文本框的文字内容，文字内容存储在key为group_id中
{
  "version": "5.3.1",
  "flags": {},
  "shapes": [
    {
      "label": "text",
      "points": [
        [
          83,
          64
        ],
        [
          235,
          64
        ],
        [
          235,
          91
        ],
        [
          83,
          91
        ]
      ],
      "group_id": "Standalone",
      "shape_type": "polygon",
      "flags": {}
    }
  ],
  "imagePath": "India_0052_211.jpg",
  "imageData": null,
  "imageHeight": 1552,
  "imageWidth": 1192
}

# 任务描述
1. 遍历所有以India开头的json文件源目录的文字识别结果，筛选出所有带有significant或accompanying这两种关键词的文本框
2. 将筛选出的json文件及同名jpg文件移动到指定目标目录中
3. 通过代码运行，自动生成一个文件。